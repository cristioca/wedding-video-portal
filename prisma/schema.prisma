generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and project ownership
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials-based login
  role          UserRole  @default(CLIENT) // "ADMIN" or "CLIENT"
  accounts      Account[]
  sessions      Session[]
  projects      Project[] // Relation to projects
}

enum UserRole {
  ADMIN
  CLIENT
}

// Track field modifications with approval workflow
model ProjectModification {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fieldName   String   // The field being modified
  oldValue    String?  // Previous value (JSON string for complex types)
  newValue    String?  // New proposed value (JSON string for complex types)
  status      ModificationStatus @default(PENDING)
  createdBy   String   // User ID who made the modification
  createdAt   DateTime @default(now())
  approvedBy  String?  // Admin user ID who approved/rejected
  approvedAt  DateTime?
  notes       String?  // Optional notes from admin
}

enum ModificationStatus {
  PENDING     // Waiting for admin approval
  APPROVED    // Approved by admin
  REJECTED    // Rejected by admin
  AUTO_APPLIED // Applied directly (admin changes)
}

// Project model for wedding videos
model Project {
  id             String    @id @default(cuid())
  name           String
  status         String // e.g., "Planning", "Filming", "Editing", "Completed"
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isArchived     Boolean   @default(false) // New field for archiving
  // Add the new fields from your component
  eventDate      DateTime
  type           String    // "NUNTA" or "BOTEZ"
  titleVideo     String?
  city           String?
  civilUnionDetails String?  // New field for civil union status
  prep           String?
  church         String?
  session        String?
  restaurant     String?
  detailsExtra   String?
  editStatus     String    @default("Pending")
  editingPreferences String?  // Client's editing preferences
  // Relation to User
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relation to Files
  files          File[]
  downloads      FileDownloadEvent[]
  modifications  ProjectModification[] // Track field modifications
  adminNotifiedOfChanges Boolean @default(false) // Track if admin has been notified of pending changes
  lastClientNotificationDate DateTime? // Track last email sent to client to prevent spam
  hasUnsentChanges Boolean @default(false) // Track if there are changes that haven't been sent to client
}

// Model for uploaded files
model File {
  id          String              @id @default(cuid())
  displayName String
  storageKey  String              // Key for S3 or other storage
  sizeBytes   BigInt
  createdAt   DateTime            @default(now())
  projectId   String
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  downloads   FileDownloadEvent[]
}

// --- NextAuth required models ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// File download tracking model
model FileDownloadEvent {
  id        String   @id @default(cuid())
  fileId    String
  projectId String
  success   Boolean
  createdAt DateTime @default(now())
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}